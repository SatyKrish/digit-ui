#!/usr/bin/env node

/**
 * Database creation Script
 * This script creates the SQLite database with proper schema
 */

try {
  console.log('Starting database creation...');
  
  const Database = require('better-sqlite3');
  const path = require('path');
  const fs = require('fs');
  
  console.log('Dependencies loaded successfully');

// Get database path
const dbPath = path.join(process.cwd(), 'data', 'chat.db');
const dbDir = path.dirname(dbPath);

// Ensure data directory exists
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir, { recursive: true });
}

// Remove existing database if it exists
if (fs.existsSync(dbPath)) {
  fs.unlinkSync(dbPath);
  console.log('Removed existing database');
}

console.log('Creating new database at:', dbPath);

// Create new database
const db = new Database(dbPath);

// Enable WAL mode for better performance
db.pragma('journal_mode = WAL');
db.pragma('synchronous = NORMAL');
db.pragma('foreign_keys = ON');

console.log('Configured database settings');

// Create migrations table
db.exec(`
  CREATE TABLE IF NOT EXISTS migrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL,
    executed_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);

console.log('Created migrations table');

// Migration 1: AI SDK Schema
const migration1 = {
  name: '001_ai_sdk_schema',
  sql: `
    -- Users table (from Azure AD authentication)
    CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      email TEXT UNIQUE NOT NULL,
      name TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    -- AI SDK-aligned chats table
    CREATE TABLE IF NOT EXISTS chats (
      id TEXT PRIMARY KEY,           -- Chat ID (used by AI SDK useChat hook)
      user_id TEXT NOT NULL,         -- User identifier (from auth)
      title TEXT DEFAULT 'New Chat', -- Optional chat title
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    );

    -- AI SDK-aligned messages table
    CREATE TABLE IF NOT EXISTS messages (
      id TEXT PRIMARY KEY,           -- Message ID (generated by AI SDK)
      chat_id TEXT NOT NULL,         -- References chats.id
      role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system', 'tool')),
      content TEXT NOT NULL,         -- Message content
      
      -- AI SDK specific fields for advanced features
      name TEXT,                     -- For tool messages
      tool_call_id TEXT,             -- For tool responses
      tool_invocations TEXT,         -- JSON array of tool calls (if any)
      experimental_attachments TEXT, -- JSON array of attachments (if any)
      annotations TEXT,              -- JSON object for custom annotations
      
      -- Metadata
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      
      -- Foreign key
      FOREIGN KEY (chat_id) REFERENCES chats (id) ON DELETE CASCADE
    );

    -- Performance indexes optimized for AI SDK usage patterns
    CREATE INDEX IF NOT EXISTS idx_chats_user_id ON chats(user_id);
    CREATE INDEX IF NOT EXISTS idx_chats_updated_at ON chats(updated_at DESC);
    CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages(chat_id);
    CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at ASC);
    CREATE INDEX IF NOT EXISTS idx_messages_role ON messages(role);
  `
};

// Migration 2: AI SDK Enhancements
const migration2 = {
  name: '002_ai_sdk_enhancements',
  sql: `
    -- Add support for AI SDK v4+ message parts and additional fields
    ALTER TABLE messages ADD COLUMN parts TEXT; -- JSON array for AI SDK v4+ parts
    ALTER TABLE messages ADD COLUMN reasoning TEXT; -- For reasoning traces
    ALTER TABLE messages ADD COLUMN finish_reason TEXT; -- AI completion finish reason
    ALTER TABLE messages ADD COLUMN usage_stats TEXT; -- JSON object for token usage
    
    -- Update chats table with additional metadata
    ALTER TABLE chats ADD COLUMN message_count INTEGER DEFAULT 0;
    ALTER TABLE chats ADD COLUMN last_message_at DATETIME;
    
    -- Create indexes for new fields
    CREATE INDEX IF NOT EXISTS idx_messages_finish_reason ON messages(finish_reason);
    CREATE INDEX IF NOT EXISTS idx_chats_message_count ON chats(message_count);
    CREATE INDEX IF NOT EXISTS idx_chats_last_message_at ON chats(last_message_at DESC);
    
    -- Create a view for chat summaries (useful for sidebar)
    CREATE VIEW IF NOT EXISTS chat_summaries AS
    SELECT 
      c.id,
      c.user_id,
      c.title,
      c.created_at,
      c.updated_at,
      c.message_count,
      c.last_message_at,
      (SELECT content FROM messages WHERE chat_id = c.id ORDER BY created_at DESC LIMIT 1) as last_message_preview
    FROM chats c;
  `
};

const migrations = [migration1, migration2];

// Run migrations
const insertMigration = db.prepare('INSERT INTO migrations (name) VALUES (?)');

for (const migration of migrations) {
  console.log(`Running migration: ${migration.name}`);
  try {
    db.exec(migration.sql);
    insertMigration.run(migration.name);
    console.log(`✓ Migration completed: ${migration.name}`);
  } catch (error) {
    console.error(`✗ Migration failed: ${migration.name}`, error);
    process.exit(1);
  }
}

// Verify tables were created
const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'").all();
console.log('\nCreated tables:');
tables.forEach(table => {
  console.log(`  - ${table.name}`);
});

// Verify views were created
const views = db.prepare("SELECT name FROM sqlite_master WHERE type='view'").all();
if (views.length > 0) {
  console.log('\nCreated views:');
  views.forEach(view => {
    console.log(`  - ${view.name}`);
  });
}

// Close database
db.close();

console.log('\n✓ Database created successfully!');
console.log(`Database location: ${dbPath}`);

} catch (error) {
  console.error('Error creating database:', error);
  process.exit(1);
}
